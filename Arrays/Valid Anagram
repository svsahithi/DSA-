Given two strings s and t, return true if the two strings are anagrams of each other, otherwise return false.

An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.

Example 1:

Input: s = "racecar", t = "carrace"

Output: true
Example 2:

Input: s = "jar", t = "jam"

Output: false


Solution
========

Using Sorting - Time complexity : O(nlogn),Space complexity: O(1)
----------------------------------------------------------------

class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length() != t.length()) return false;
        char[] sarr = s.toCharArray();
        char[] tarr = t.toCharArray();
        Arrays.sort(sarr);
        Arrays.sort(tarr);
        return Arrays.equals(sarr,tarr);
    }
}

Using HashMap - Time complexity : O(n), Space Complexity: O(n)
-------------------------------------------------------------

class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length() != t.length()) return false;
        HashMap<Character,Integer> charcount = new HashMap<>();
        for(char c: s.toCharArray()){
            charcount.put(c, charcount.getOrDefault(c, 0)+1);
        }
        for(char c: t.toCharArray()){
            if(!charcount.containsKey(c) || charcount.get(c)==0){
                return false;
            }
            charcount.put(c, charcount.get(c)-1);
        }
        return true;
    }
}

Using ArrayCount - Time Complexity : O(n), Space Complexity :O(1)
-----------------------------------------------------------------

class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length() != t.length()) return false;
        int[] charcount = new int[26];
        for(char c : s.toCharArray()){
            charcount[c - 'a']++;
        }
        for(char c : t.toCharArray()){
            charcount[c - 'a']--;
            if(charcount[c - 'a'] <0) return false;
        }
        return true;
    }
}


Learnings
=========
1.toCharArray() - converts the string into array of char
2.Uppercase 'A' to 'Z' → ASCII values range from 65 to 90
3.Lowercase 'a' to 'z' → ASCII values range from 97 to 122
4.We can't use the Arraycount approach for Case sensitive (Hello and hello are not smae) 
5.toLowerCase() - converts the string to lower case and we can use the array count approach for case insenitive (Hello and hello are same)



