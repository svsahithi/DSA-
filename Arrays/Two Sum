Given an array of integers nums and an integer target, return the indices i and j such that nums[i] + nums[j] == target and i != j.

You may assume that every input has exactly one pair of indices i and j that satisfy the condition.

Return the answer with the smaller index first.

Example 1:

Input: 
nums = [3,4,5,6], target = 7

Output: [0,1]
Explanation: nums[0] + nums[1] == 7, so we return [0, 1].

Example 2:

Input: nums = [4,5,6], target = 10

Output: [0,2]
Example 3:

Input: nums = [5,5], target = 10

Output: [0,1]
Constraints:

2 <= nums.length <= 1000
-10,000,000 <= nums[i] <= 10,000,000
-10,000,000 <= target <= 10,000,000

Solution 
========

Using two pointer Approach : Time COmplexity - O(n^2), Space Complexity - O(1)
------------------------------------------------------------------------------

class Solution {
    public int[] twoSum(int[] nums, int target) {
     int[] ans = new int[2];
     for(int i=0;i<nums.length;i++){
        for(int j=i+1;j<nums.length;j++){
            if(nums[i]+nums[j]== target){
               ans[0] = i;
               ans[1] = j;
            }
        }
     }
     return ans;  
    }
}

Using HashMap : Time Complexity - O(n), Space Complexity - O(n)
--------------------------------------------------------------

class Solution {
    public int[] twoSum(int[] nums, int target) {
     HashMap<Integer,Integer> countsum = new HashMap<>();
     for(int i=0;i<nums.length;i++){
        int complement = target - nums[i];
        if(countsum.containsKey(complement)){
            return new int[]{countsum.get(complement),i};
        }
        countsum.put(nums[i],i);
     }
     return new int[]{-1,-1};
    }
}
