Given an integer array nums, return true if any value appears more than once in the array, otherwise return false.

Example 1:

Input: nums = [1, 2, 3, 3]

Output: true

Example 2:

Input: nums = [1, 2, 3, 4]

Output: false


Solution :-
----------
Using HashSet : time complexity : O(n), space complexity : O(n)

class Solution {
    public boolean hasDuplicate(int[] nums) {
        int n = nums.length;
        HashSet<Integer> dup = new HashSet<>();
        for(int i=0;i<n;i++){
            if(!dup.add(nums[i]){
               return true;
            }
        return false;
    }
}




Optimized Approach 
------------------
Using Sorting : time complexity : O(nlogn), space complexity : O(1)

class Solution {
    public boolean hasDuplicate(int[] nums) {
     Arrays.sort(nums);
     for(int i=1;i<nums.length;i++){
        if(nums[i] == nums[i-1]){
            return true;
        }
     }
     return false;
    }
}


Learnings
=========

1.Arrays.sort(arry_name) - used to sort the arrays
2.if(!dup.add(nums[i]) - shortcut to check whether we are the array having duplicates or not if dup.app(nums[i]) is true that means no duplicates
